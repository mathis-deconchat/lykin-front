"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `FlywaySchemaHistory`."""
  flywaySchemaHistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FlywaySchemaHistoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FlywaySchemaHistoryFilter
  ): FlywaySchemaHistoriesConnection

  """Reads and enables pagination through a set of `Operation`."""
  operations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperationFilter
  ): OperationsConnection

  """Reads and enables pagination through a set of `OperationCategory`."""
  operationCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OperationCategory`."""
    orderBy: [OperationCategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperationCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperationCategoryFilter
  ): OperationCategoriesConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `Users2Operation`."""
  users2Operations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Users2Operation`."""
    orderBy: [Users2OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Users2OperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Users2OperationFilter
  ): Users2OperationsConnection
  flywaySchemaHistory(installedRank: Int!): FlywaySchemaHistory
  operation(id: Int!): Operation
  operationCategory(id: Int!): OperationCategory
  user(id: Int!): User
  users2Operation(id: Int!): Users2Operation

  """Reads a single `FlywaySchemaHistory` using its globally unique `ID`."""
  flywaySchemaHistoryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FlywaySchemaHistory`.
    """
    nodeId: ID!
  ): FlywaySchemaHistory

  """Reads a single `Operation` using its globally unique `ID`."""
  operationByNodeId(
    """The globally unique `ID` to be used in selecting a single `Operation`."""
    nodeId: ID!
  ): Operation

  """Reads a single `OperationCategory` using its globally unique `ID`."""
  operationCategoryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OperationCategory`.
    """
    nodeId: ID!
  ): OperationCategory

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `Users2Operation` using its globally unique `ID`."""
  users2OperationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Users2Operation`.
    """
    nodeId: ID!
  ): Users2Operation
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `FlywaySchemaHistory` values."""
type FlywaySchemaHistoriesConnection {
  """A list of `FlywaySchemaHistory` objects."""
  nodes: [FlywaySchemaHistory]!

  """
  A list of edges which contains the `FlywaySchemaHistory` and cursor to aid in pagination.
  """
  edges: [FlywaySchemaHistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FlywaySchemaHistory` you could get from the connection.
  """
  totalCount: Int!
}

type FlywaySchemaHistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  installedRank: Int!
  version: String
  description: String!
  type: String!
  script: String!
  checksum: Int
  installedBy: String!
  installedOn: Datetime!
  executionTime: Int!
  success: Boolean!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A `FlywaySchemaHistory` edge in the connection."""
type FlywaySchemaHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FlywaySchemaHistory` at the end of the edge."""
  node: FlywaySchemaHistory
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `FlywaySchemaHistory`."""
enum FlywaySchemaHistoriesOrderBy {
  NATURAL
  INSTALLED_RANK_ASC
  INSTALLED_RANK_DESC
  VERSION_ASC
  VERSION_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ASC
  TYPE_DESC
  SCRIPT_ASC
  SCRIPT_DESC
  CHECKSUM_ASC
  CHECKSUM_DESC
  INSTALLED_BY_ASC
  INSTALLED_BY_DESC
  INSTALLED_ON_ASC
  INSTALLED_ON_DESC
  EXECUTION_TIME_ASC
  EXECUTION_TIME_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FlywaySchemaHistory` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FlywaySchemaHistoryCondition {
  """Checks for equality with the object’s `installedRank` field."""
  installedRank: Int

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `script` field."""
  script: String

  """Checks for equality with the object’s `checksum` field."""
  checksum: Int

  """Checks for equality with the object’s `installedBy` field."""
  installedBy: String

  """Checks for equality with the object’s `installedOn` field."""
  installedOn: Datetime

  """Checks for equality with the object’s `executionTime` field."""
  executionTime: Int

  """Checks for equality with the object’s `success` field."""
  success: Boolean
}

"""
A filter to be used against `FlywaySchemaHistory` object types. All fields are combined with a logical ‘and.’
"""
input FlywaySchemaHistoryFilter {
  """Filter by the object’s `installedRank` field."""
  installedRank: IntFilter

  """Filter by the object’s `version` field."""
  version: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `script` field."""
  script: StringFilter

  """Filter by the object’s `checksum` field."""
  checksum: IntFilter

  """Filter by the object’s `installedBy` field."""
  installedBy: StringFilter

  """Filter by the object’s `installedOn` field."""
  installedOn: DatetimeFilter

  """Filter by the object’s `executionTime` field."""
  executionTime: IntFilter

  """Filter by the object’s `success` field."""
  success: BooleanFilter

  """Checks for all expressions in this list."""
  and: [FlywaySchemaHistoryFilter!]

  """Checks for any expressions in this list."""
  or: [FlywaySchemaHistoryFilter!]

  """Negates the expression."""
  not: FlywaySchemaHistoryFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""A connection to a list of `Operation` values."""
type OperationsConnection {
  """A list of `Operation` objects."""
  nodes: [Operation]!

  """
  A list of edges which contains the `Operation` and cursor to aid in pagination.
  """
  edges: [OperationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operation` you could get from the connection."""
  totalCount: Int!
}

type Operation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  amount: BigFloat!
  description: String!
  date: Date!
  createdAt: Datetime!
  updatedAt: Datetime!
  deletedAt: Datetime
  s3Key: String
  categoryId: Int

  """
  Reads a single `OperationCategory` that is related to this `Operation`.
  """
  category: OperationCategory

  """Reads and enables pagination through a set of `Users2Operation`."""
  users2Operations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Users2Operation`."""
    orderBy: [Users2OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Users2OperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Users2OperationFilter
  ): Users2OperationsConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByUsers2OperationOperationIdAndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): OperationUsersByUsers2OperationOperationIdAndUserIdManyToManyConnection!
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""The day, does not include a time."""
scalar Date

type OperationCategory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!
  deletedAt: Datetime

  """Reads and enables pagination through a set of `Operation`."""
  operationsByCategoryId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperationFilter
  ): OperationsConnection!
}

"""Methods to use when ordering `Operation`."""
enum OperationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DATE_ASC
  DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  S3_KEY_ASC
  S3_KEY_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Operation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OperationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `s3Key` field."""
  s3Key: String

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: Int
}

"""
A filter to be used against `Operation` object types. All fields are combined with a logical ‘and.’
"""
input OperationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `amount` field."""
  amount: BigFloatFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `s3Key` field."""
  s3Key: StringFilter

  """Filter by the object’s `categoryId` field."""
  categoryId: IntFilter

  """Checks for all expressions in this list."""
  and: [OperationFilter!]

  """Checks for any expressions in this list."""
  or: [OperationFilter!]

  """Negates the expression."""
  not: OperationFilter
}

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """Not included in the specified list."""
  notIn: [BigFloat!]

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat
}

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

"""A connection to a list of `Users2Operation` values."""
type Users2OperationsConnection {
  """A list of `Users2Operation` objects."""
  nodes: [Users2Operation]!

  """
  A list of edges which contains the `Users2Operation` and cursor to aid in pagination.
  """
  edges: [Users2OperationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `Users2Operation` you could get from the connection.
  """
  totalCount: Int!
}

type Users2Operation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  operationId: Int!
  createdAt: Datetime!
  updatedAt: Datetime!
  deletedAt: Datetime

  """Reads a single `User` that is related to this `Users2Operation`."""
  user: User

  """Reads a single `Operation` that is related to this `Users2Operation`."""
  operation: Operation
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  email: String!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!
  deletedAt: Datetime

  """Reads and enables pagination through a set of `Users2Operation`."""
  users2Operations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Users2Operation`."""
    orderBy: [Users2OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Users2OperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Users2OperationFilter
  ): Users2OperationsConnection!

  """Reads and enables pagination through a set of `Operation`."""
  operationsByUsers2OperationUserIdAndOperationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperationFilter
  ): UserOperationsByUsers2OperationUserIdAndOperationIdManyToManyConnection!
}

"""Methods to use when ordering `Users2Operation`."""
enum Users2OperationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  OPERATION_ID_ASC
  OPERATION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Users2Operation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input Users2OperationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `operationId` field."""
  operationId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime
}

"""
A filter to be used against `Users2Operation` object types. All fields are combined with a logical ‘and.’
"""
input Users2OperationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `operationId` field."""
  operationId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [Users2OperationFilter!]

  """Checks for any expressions in this list."""
  or: [Users2OperationFilter!]

  """Negates the expression."""
  not: Users2OperationFilter
}

"""
A connection to a list of `Operation` values, with data from `Users2Operation`.
"""
type UserOperationsByUsers2OperationUserIdAndOperationIdManyToManyConnection {
  """A list of `Operation` objects."""
  nodes: [Operation]!

  """
  A list of edges which contains the `Operation`, info from the `Users2Operation`, and the cursor to aid in pagination.
  """
  edges: [UserOperationsByUsers2OperationUserIdAndOperationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operation` you could get from the connection."""
  totalCount: Int!
}

"""
A `Operation` edge in the connection, with data from `Users2Operation`.
"""
type UserOperationsByUsers2OperationUserIdAndOperationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operation` at the end of the edge."""
  node: Operation

  """Reads and enables pagination through a set of `Users2Operation`."""
  users2Operations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Users2Operation`."""
    orderBy: [Users2OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Users2OperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Users2OperationFilter
  ): Users2OperationsConnection!
}

"""A `Users2Operation` edge in the connection."""
type Users2OperationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Users2Operation` at the end of the edge."""
  node: Users2Operation
}

"""
A connection to a list of `User` values, with data from `Users2Operation`.
"""
type OperationUsersByUsers2OperationOperationIdAndUserIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Users2Operation`, and the cursor to aid in pagination.
  """
  edges: [OperationUsersByUsers2OperationOperationIdAndUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Users2Operation`."""
type OperationUsersByUsers2OperationOperationIdAndUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Users2Operation`."""
  users2Operations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Users2Operation`."""
    orderBy: [Users2OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Users2OperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Users2OperationFilter
  ): Users2OperationsConnection!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""A `Operation` edge in the connection."""
type OperationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operation` at the end of the edge."""
  node: Operation
}

"""A connection to a list of `OperationCategory` values."""
type OperationCategoriesConnection {
  """A list of `OperationCategory` objects."""
  nodes: [OperationCategory]!

  """
  A list of edges which contains the `OperationCategory` and cursor to aid in pagination.
  """
  edges: [OperationCategoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OperationCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OperationCategory` edge in the connection."""
type OperationCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OperationCategory` at the end of the edge."""
  node: OperationCategory
}

"""Methods to use when ordering `OperationCategory`."""
enum OperationCategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `OperationCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OperationCategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime
}

"""
A filter to be used against `OperationCategory` object types. All fields are combined with a logical ‘and.’
"""
input OperationCategoryFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [OperationCategoryFilter!]

  """Checks for any expressions in this list."""
  or: [OperationCategoryFilter!]

  """Negates the expression."""
  not: OperationCategoryFilter
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `FlywaySchemaHistory`."""
  createFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFlywaySchemaHistoryInput!
  ): CreateFlywaySchemaHistoryPayload

  """Creates a single `Operation`."""
  createOperation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOperationInput!
  ): CreateOperationPayload

  """Creates a single `OperationCategory`."""
  createOperationCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOperationCategoryInput!
  ): CreateOperationCategoryPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `Users2Operation`."""
  createUsers2Operation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUsers2OperationInput!
  ): CreateUsers2OperationPayload

  """
  Updates a single `FlywaySchemaHistory` using its globally unique id and a patch.
  """
  updateFlywaySchemaHistoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFlywaySchemaHistoryByNodeIdInput!
  ): UpdateFlywaySchemaHistoryPayload

  """Updates a single `FlywaySchemaHistory` using a unique key and a patch."""
  updateFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFlywaySchemaHistoryInput!
  ): UpdateFlywaySchemaHistoryPayload

  """Updates a single `Operation` using its globally unique id and a patch."""
  updateOperationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOperationByNodeIdInput!
  ): UpdateOperationPayload

  """Updates a single `Operation` using a unique key and a patch."""
  updateOperation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOperationInput!
  ): UpdateOperationPayload

  """
  Updates a single `OperationCategory` using its globally unique id and a patch.
  """
  updateOperationCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOperationCategoryByNodeIdInput!
  ): UpdateOperationCategoryPayload

  """Updates a single `OperationCategory` using a unique key and a patch."""
  updateOperationCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOperationCategoryInput!
  ): UpdateOperationCategoryPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Updates a single `Users2Operation` using its globally unique id and a patch.
  """
  updateUsers2OperationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUsers2OperationByNodeIdInput!
  ): UpdateUsers2OperationPayload

  """Updates a single `Users2Operation` using a unique key and a patch."""
  updateUsers2Operation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUsers2OperationInput!
  ): UpdateUsers2OperationPayload

  """Deletes a single `FlywaySchemaHistory` using its globally unique id."""
  deleteFlywaySchemaHistoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFlywaySchemaHistoryByNodeIdInput!
  ): DeleteFlywaySchemaHistoryPayload

  """Deletes a single `FlywaySchemaHistory` using a unique key."""
  deleteFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFlywaySchemaHistoryInput!
  ): DeleteFlywaySchemaHistoryPayload

  """Deletes a single `Operation` using its globally unique id."""
  deleteOperationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOperationByNodeIdInput!
  ): DeleteOperationPayload

  """Deletes a single `Operation` using a unique key."""
  deleteOperation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOperationInput!
  ): DeleteOperationPayload

  """Deletes a single `OperationCategory` using its globally unique id."""
  deleteOperationCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOperationCategoryByNodeIdInput!
  ): DeleteOperationCategoryPayload

  """Deletes a single `OperationCategory` using a unique key."""
  deleteOperationCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOperationCategoryInput!
  ): DeleteOperationCategoryPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `Users2Operation` using its globally unique id."""
  deleteUsers2OperationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUsers2OperationByNodeIdInput!
  ): DeleteUsers2OperationPayload

  """Deletes a single `Users2Operation` using a unique key."""
  deleteUsers2Operation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUsers2OperationInput!
  ): DeleteUsers2OperationPayload
}

"""The output of our create `FlywaySchemaHistory` mutation."""
type CreateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was created by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""All input for the create `FlywaySchemaHistory` mutation."""
input CreateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` to be created by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistoryInput!
}

"""An input for mutations affecting `FlywaySchemaHistory`"""
input FlywaySchemaHistoryInput {
  installedRank: Int!
  version: String
  description: String!
  type: String!
  script: String!
  checksum: Int
  installedBy: String!
  installedOn: Datetime
  executionTime: Int!
  success: Boolean!
}

"""The output of our create `Operation` mutation."""
type CreateOperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Operation` that was created by this mutation."""
  operation: Operation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `OperationCategory` that is related to this `Operation`.
  """
  category: OperationCategory

  """An edge for our `Operation`. May be used by Relay 1."""
  operationEdge(
    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperationsEdge
}

"""All input for the create `Operation` mutation."""
input CreateOperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Operation` to be created by this mutation."""
  operation: OperationInput!
}

"""An input for mutations affecting `Operation`"""
input OperationInput {
  id: Int
  amount: BigFloat!
  description: String!
  date: Date!
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
  s3Key: String
  categoryId: Int
}

"""The output of our create `OperationCategory` mutation."""
type CreateOperationCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OperationCategory` that was created by this mutation."""
  operationCategory: OperationCategory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `OperationCategory`. May be used by Relay 1."""
  operationCategoryEdge(
    """The method to use when ordering `OperationCategory`."""
    orderBy: [OperationCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperationCategoriesEdge
}

"""All input for the create `OperationCategory` mutation."""
input CreateOperationCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OperationCategory` to be created by this mutation."""
  operationCategory: OperationCategoryInput!
}

"""An input for mutations affecting `OperationCategory`"""
input OperationCategoryInput {
  id: Int
  name: String!
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  email: String!
  name: String!
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
}

"""The output of our create `Users2Operation` mutation."""
type CreateUsers2OperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Users2Operation` that was created by this mutation."""
  users2Operation: Users2Operation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Users2Operation`."""
  user: User

  """Reads a single `Operation` that is related to this `Users2Operation`."""
  operation: Operation

  """An edge for our `Users2Operation`. May be used by Relay 1."""
  users2OperationEdge(
    """The method to use when ordering `Users2Operation`."""
    orderBy: [Users2OperationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): Users2OperationsEdge
}

"""All input for the create `Users2Operation` mutation."""
input CreateUsers2OperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Users2Operation` to be created by this mutation."""
  users2Operation: Users2OperationInput!
}

"""An input for mutations affecting `Users2Operation`"""
input Users2OperationInput {
  id: Int
  userId: Int!
  operationId: Int!
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
}

"""The output of our update `FlywaySchemaHistory` mutation."""
type UpdateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was updated by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""All input for the `updateFlywaySchemaHistoryByNodeId` mutation."""
input UpdateFlywaySchemaHistoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FlywaySchemaHistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FlywaySchemaHistory` being updated.
  """
  patch: FlywaySchemaHistoryPatch!
}

"""
Represents an update to a `FlywaySchemaHistory`. Fields that are set will be updated.
"""
input FlywaySchemaHistoryPatch {
  installedRank: Int
  version: String
  description: String
  type: String
  script: String
  checksum: Int
  installedBy: String
  installedOn: Datetime
  executionTime: Int
  success: Boolean
}

"""All input for the `updateFlywaySchemaHistory` mutation."""
input UpdateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FlywaySchemaHistory` being updated.
  """
  patch: FlywaySchemaHistoryPatch!
  installedRank: Int!
}

"""The output of our update `Operation` mutation."""
type UpdateOperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Operation` that was updated by this mutation."""
  operation: Operation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `OperationCategory` that is related to this `Operation`.
  """
  category: OperationCategory

  """An edge for our `Operation`. May be used by Relay 1."""
  operationEdge(
    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperationsEdge
}

"""All input for the `updateOperationByNodeId` mutation."""
input UpdateOperationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Operation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Operation` being updated.
  """
  patch: OperationPatch!
}

"""
Represents an update to a `Operation`. Fields that are set will be updated.
"""
input OperationPatch {
  id: Int
  amount: BigFloat
  description: String
  date: Date
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
  s3Key: String
  categoryId: Int
}

"""All input for the `updateOperation` mutation."""
input UpdateOperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Operation` being updated.
  """
  patch: OperationPatch!
  id: Int!
}

"""The output of our update `OperationCategory` mutation."""
type UpdateOperationCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OperationCategory` that was updated by this mutation."""
  operationCategory: OperationCategory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `OperationCategory`. May be used by Relay 1."""
  operationCategoryEdge(
    """The method to use when ordering `OperationCategory`."""
    orderBy: [OperationCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperationCategoriesEdge
}

"""All input for the `updateOperationCategoryByNodeId` mutation."""
input UpdateOperationCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OperationCategory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OperationCategory` being updated.
  """
  patch: OperationCategoryPatch!
}

"""
Represents an update to a `OperationCategory`. Fields that are set will be updated.
"""
input OperationCategoryPatch {
  id: Int
  name: String
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
}

"""All input for the `updateOperationCategory` mutation."""
input UpdateOperationCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OperationCategory` being updated.
  """
  patch: OperationCategoryPatch!
  id: Int!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  email: String
  name: String
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  id: Int!
}

"""The output of our update `Users2Operation` mutation."""
type UpdateUsers2OperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Users2Operation` that was updated by this mutation."""
  users2Operation: Users2Operation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Users2Operation`."""
  user: User

  """Reads a single `Operation` that is related to this `Users2Operation`."""
  operation: Operation

  """An edge for our `Users2Operation`. May be used by Relay 1."""
  users2OperationEdge(
    """The method to use when ordering `Users2Operation`."""
    orderBy: [Users2OperationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): Users2OperationsEdge
}

"""All input for the `updateUsers2OperationByNodeId` mutation."""
input UpdateUsers2OperationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Users2Operation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Users2Operation` being updated.
  """
  patch: Users2OperationPatch!
}

"""
Represents an update to a `Users2Operation`. Fields that are set will be updated.
"""
input Users2OperationPatch {
  id: Int
  userId: Int
  operationId: Int
  createdAt: Datetime
  updatedAt: Datetime
  deletedAt: Datetime
}

"""All input for the `updateUsers2Operation` mutation."""
input UpdateUsers2OperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Users2Operation` being updated.
  """
  patch: Users2OperationPatch!
  id: Int!
}

"""The output of our delete `FlywaySchemaHistory` mutation."""
type DeleteFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was deleted by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory
  deletedFlywaySchemaHistoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""All input for the `deleteFlywaySchemaHistoryByNodeId` mutation."""
input DeleteFlywaySchemaHistoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FlywaySchemaHistory` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFlywaySchemaHistory` mutation."""
input DeleteFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  installedRank: Int!
}

"""The output of our delete `Operation` mutation."""
type DeleteOperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Operation` that was deleted by this mutation."""
  operation: Operation
  deletedOperationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `OperationCategory` that is related to this `Operation`.
  """
  category: OperationCategory

  """An edge for our `Operation`. May be used by Relay 1."""
  operationEdge(
    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperationsEdge
}

"""All input for the `deleteOperationByNodeId` mutation."""
input DeleteOperationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Operation` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOperation` mutation."""
input DeleteOperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `OperationCategory` mutation."""
type DeleteOperationCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OperationCategory` that was deleted by this mutation."""
  operationCategory: OperationCategory
  deletedOperationCategoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `OperationCategory`. May be used by Relay 1."""
  operationCategoryEdge(
    """The method to use when ordering `OperationCategory`."""
    orderBy: [OperationCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperationCategoriesEdge
}

"""All input for the `deleteOperationCategoryByNodeId` mutation."""
input DeleteOperationCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OperationCategory` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOperationCategory` mutation."""
input DeleteOperationCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Users2Operation` mutation."""
type DeleteUsers2OperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Users2Operation` that was deleted by this mutation."""
  users2Operation: Users2Operation
  deletedUsers2OperationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Users2Operation`."""
  user: User

  """Reads a single `Operation` that is related to this `Users2Operation`."""
  operation: Operation

  """An edge for our `Users2Operation`. May be used by Relay 1."""
  users2OperationEdge(
    """The method to use when ordering `Users2Operation`."""
    orderBy: [Users2OperationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): Users2OperationsEdge
}

"""All input for the `deleteUsers2OperationByNodeId` mutation."""
input DeleteUsers2OperationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Users2Operation` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUsers2Operation` mutation."""
input DeleteUsers2OperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}
